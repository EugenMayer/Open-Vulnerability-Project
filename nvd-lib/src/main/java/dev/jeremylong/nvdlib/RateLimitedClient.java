/*
 *  Copyright 2022 Jeremy Long
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package dev.jeremylong.nvdlib;

import org.apache.hc.client5.http.async.methods.SimpleHttpRequest;
import org.apache.hc.client5.http.async.methods.SimpleHttpResponse;
import org.apache.hc.client5.http.impl.async.CloseableHttpAsyncClient;
import org.apache.hc.client5.http.impl.async.HttpAsyncClients;
import org.apache.hc.core5.concurrent.FutureCallback;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/**
 * Rate limited client for use with a rate limited API. A minimum
 * delay between API calls can be configured.
 */
class RateLimitedClient implements AutoCloseable {

    /**
     * Reference to the logger.
     */
    private final Logger log = LoggerFactory.getLogger(SimpleFutureResponse.class);
    /**
     * The underlying Async Client.
     */
    private final CloseableHttpAsyncClient client;
    /**
     * Executor service for asynch implementation.
     */
    private final ExecutorService executor = Executors.newSingleThreadExecutor();
    /**
     * The epoch time of the last request.
     */
    private long lastRequest = 0;
    /**
     * The minimum delay in milliseconds between API calls.
     */
    private long delay = 0;

    /**
     * Construct a rate limited client without a delay.
     */
    RateLimitedClient() {
        this(0);
    }

    /**
     * Construct a rate limited client with a given delay.
     * @param delay the number of milliseconds to wait between API calls
     */
    RateLimitedClient(int delay) {
        this.delay = delay;
        client = HttpAsyncClients.createDefault();
        client.start();
    }

    @Override
    public void close() throws Exception {
        if (client != null) {
            client.close();
        }
    }

    /**
     * Sets the minimum delay between API calls.
     * @param milliseconds the delay duration
     */
    void setDelay(long milliseconds) {
        this.delay = milliseconds;
    }

    /**
     * Ensures the minimum delay has passed since the last call and asynchronously calls the API.
     * @param request the request
     * @return the future response
     */
    Future<SimpleHttpResponse> execute(SimpleHttpRequest request) {
        return executor.submit(() -> {
            return delayedExecute(request);
        });
    }

    /**
     * Ensures the minimum delay has passed since the last call and calls the API.
     * @param request the request
     * @return the future response
     * @throws ExecutionException thrown if there is an exception
     * @throws InterruptedException thrown if interrupted
     */
    private SimpleHttpResponse delayedExecute(SimpleHttpRequest request) throws ExecutionException, InterruptedException {
        if (lastRequest > 0 && delay > 0) {
            long now = LocalDateTime.now().toInstant(ZoneOffset.UTC).toEpochMilli();
            long wait = delay - now - lastRequest;
            if (wait > 0) {
                Thread.sleep(wait);
            }
        }
        Future<SimpleHttpResponse> f = client.execute(request, new SimpleFutureResponse());
        lastRequest = LocalDateTime.now().toInstant(ZoneOffset.UTC).toEpochMilli();
        return f.get();
    }

    /**
     * Future response.
     */
    class SimpleFutureResponse implements FutureCallback<SimpleHttpResponse> {
        /**
         * Reference to the logger.
         */
        private final Logger log = LoggerFactory.getLogger(SimpleFutureResponse.class);

        @Override
        public void completed(SimpleHttpResponse result) {
            String response = result.getBodyText();
            log.debug("response::{}", response);
        }

        @Override
        public void failed(Exception ex) {
            log.debug("request failed", ex);
        }

        @Override
        public void cancelled() {
            // do nothing
        }
    }
}
